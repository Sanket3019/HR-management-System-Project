package com.app.dao;

import java.util.List;
import java.util.Random;

import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.bind.annotation.RequestParam;

import com.app.pojos.Department;
import com.app.pojos.Project;
import com.app.pojos.User;

@Service
@Transactional
public class UserDaoImpl implements IUserDao 
{
	@Autowired
	private SessionFactory sf;

	@Override
	public Integer registerUser(User user, int project_id,int department_id) 
	{
	    int id = (Integer)sf.getCurrentSession().save(user);
		User u=sf.getCurrentSession().get(User.class,id);
		Project p=sf.getCurrentSession().get(Project.class,project_id);
		u.setProject(p);	
		return 1;
	}

	@Override
	public User login(User user) 
	{
		String jpql = "select u from User u where u.email_id =:em and u.password = :pass";
		return sf.getCurrentSession().createQuery(jpql, User.class).setParameter("em",user.getEmail_id())
				.setParameter("pass",user.getPassword()).getSingleResult();
	}

	@Override
	public List<User> getAllUsers() 
	{
		String jpql = "select u from User u join fetch u.project";
		return sf.getCurrentSession().createQuery(jpql, User.class).getResultList();
	}

	@Override
	public User getUserDetails(int id) 
	{
		String jpql = "select u from User u left outer join fetch u.project where u.id =:id";
		return sf.getCurrentSession().createQuery(jpql, User.class).setParameter("id", id).getSingleResult();
	}

	@Override
	public User updateDetails(User u) 
	{
			Session hs=sf.getCurrentSession();
			hs.clear();//clears cache
			hs.update(u);//user --persistent
			return u;
		}

	@Override
	public User findByEmail(User user) 
	{
		String str = "select u from User u where u.email_id =:em";
		return sf.getCurrentSession().createQuery(str,User.class).setParameter("em",user.getEmail_id()).
				getSingleResult();
	}

	@Override
	public int generateOtp() 
	{
		Random random = new Random();
		int num = random.nextInt(99999) + 99999;
		if (num < 100000 || num > 999999) 
		{
			num = random.nextInt(99999) + 99999;
			if (num < 100000 || num > 999999)
			{
				System.out.println("Unable to generate PIN at this time..");
			}
		}
		return num;
	}

	@Override
	public User validateUser(String email_id, String password) 
	{
		String str = "select u from User u where u.email_id =:email_id and u.password=:password";
		return sf.getCurrentSession().createQuery(str,User.class).setParameter("email_id", email_id)
				.setParameter("password", password).getSingleResult();
		
	}

}
