package com.app.dao;

import java.util.List;
import java.util.Random;

import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;


import com.app.pojos.Department;
import com.app.pojos.Otp;
import com.app.pojos.Project;
import com.app.pojos.User;

@Service
@Transactional
public class UserDaoImpl implements IUserDao 
{
		@Autowired
		private SessionFactory sf;
	
		@Override
		public Integer registerUser(User user, int project_id,int department_id) 
		{
		    int id = (Integer)sf.getCurrentSession().save(user);
			User u=sf.getCurrentSession().get(User.class,id);
			Project p=sf.getCurrentSession().get(Project.class,project_id);
			u.setProject(p);
			Department d=sf.getCurrentSession().get(Department.class,department_id);
			u.setDepartment(d);
			
			return 1;
		}
	
		@Override
		public User login(User user) 
		{
			String jpql = "select u from User u where u.email_id =:em and u.password = :pass";
			return sf.getCurrentSession().createQuery(jpql, User.class).setParameter("em",user.getEmail_id())
					.setParameter("pass",user.getPassword()).getSingleResult();
		}
	
		@Override
		public List<User> getAllUsers() 
		{
			String jpql = "select u from User u join fetch u.project";
			return sf.getCurrentSession().createQuery(jpql, User.class).getResultList();
		}
	
		@Override
		public User getUserDetails(int id) 
		{
			String jpql = "select u from User u left outer join fetch u.project where u.id =:id";
			return sf.getCurrentSession().createQuery(jpql, User.class).setParameter("id", id).getSingleResult();
		}
	
		@Override
		public String updateDetails(int id,User user) {
			User ur=sf.getCurrentSession().get(User.class,id);
			
			ur.setFirst_name(user.getFirst_name());
			ur.setLast_name(user.getLast_name());
			ur.setRole(user.getRole());
			ur.setEmail_id(user.getEmail_id());
			ur.setPassword(user.getPassword());
			ur.setPermanant_address(user.getPermanant_address());
			ur.setCity(user.getCity());
			ur.setSalary(user.getSalary());
			ur.setContact(user.getContact());
			ur.setGender(user.getGender());
			ur.setHr_id(user.getHr_id());
			ur.setDate_of_birth(user.getDate_of_birth());
			ur.setDate_of_joining(user.getDate_of_joining());
			ur.setExperience(user.getExperience());
			ur.setMaritial_status(user.getMaritial_status());
			
			rm.setArea(room.getArea());
			rm.setCity(room.getCity());
			rm.setPincode(room.getPincode());
			rm.setRent(room.getRent());
			rm.setResiadd(room.getResiadd());
			rm.setRoomtype(room.getRoomtype());
			rm.setFacilities(room.getFacilities());
			return "Roomdetails Updated Sucessfully";
		}

		@Override
		public User findByEmail(User user) 
		{
			String str = "select u from User u where u.email_id =:em";
			return sf.getCurrentSession().createQuery(str,User.class).setParameter("em",user.getEmail_id()).
					getSingleResult();
		}
	
		@Override
		public int generateOtp() 
		{
			Random random = new Random();
			int num = random.nextInt(99999) + 99999;
			if (num < 100000 || num > 999999) 
			{
				num = random.nextInt(99999) + 99999;
				if (num < 100000 || num > 999999)
				{
					System.out.println("Unable to generate PIN at this time..");
				}
			}
			return num;
		}

		@Override
		public User validateUser(String email_id, String password) 
		{
			String str = "select u from User u where u.email_id =:email_id and u.password=:password";
			return sf.getCurrentSession().createQuery(str,User.class).setParameter("email_id", email_id)
					.setParameter("password", password).getSingleResult();
			
		}
	
		@Override
		public void deleteOtp() 
		{
			 Otp o=sf.getCurrentSession().createQuery("select o from Otp o",Otp.class).getSingleResult();
			 sf.getCurrentSession().delete(o);
			
		}

		@Override
		public void saveOtp(Otp otp) 
		{
			sf.getCurrentSession().save(otp);
		}

		@Override
		public Otp getOtp()
		{
			return sf.getCurrentSession().createQuery("select o from Otp o",Otp.class).getSingleResult();
		}
		
		@Override
		public void resetPassword(User user) 
		{
			String str = "select u from User u where u.email_id=:em";
			User u=sf.getCurrentSession().createQuery(str,User.class).setParameter("em",user.getEmail_id()).getSingleResult();
			u.setPassword(user.getPassword());
			//otp.setOtp(0);
			sf.getCurrentSession().save(u);
		}

}

