package com.app.controller;

import java.util.List;

import javax.persistence.NoResultException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.mail.MailException;
import org.springframework.mail.SimpleMailMessage;
import org.springframework.mail.javamail.JavaMailSender;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.app.dao.IUserDao;
import com.app.pojos.Otp;
import com.app.pojos.User;

@CrossOrigin(allowedHeaders = "*")
@RestController
@RequestMapping("/user")
public class UserController 
{

		@Autowired
		IUserDao iuserdao;
		
		
		@Autowired
		private JavaMailSender mailsender;
		
	
		@GetMapping("/getuser/{id}") 
		public ResponseEntity<?> getUserDetails(@PathVariable int id)
		{
			System.out.println("in get emp dtls " + id);
		
			User empDetails = iuserdao.getUserDetails(id);
			if (empDetails == null)
			{
				return new ResponseEntity<String>("Emp not found...", HttpStatus.NOT_FOUND);
			}
			return new ResponseEntity<User>(empDetails, HttpStatus.OK);
		}
	
		@GetMapping
		public List<User> getAllUser()
		{
			List<User> ul = iuserdao.getAllUsers();
			System.out.println(ul);
			return ul;
		}
	
	
	
		@PostMapping("/register")
		public Integer register(@RequestBody User user,HttpServletRequest request, Model map, HttpSession hs)
		{
			System.out.println(user);
			String em = request.getParameter("email_id");
			
			 int department_id = user.getDepartment().getId();
			 int project_id = user.getProject().getId();
			 
			if(iuserdao.registerUser(user,project_id,department_id)!=0)
			{
				String msg = "your email id is "+user.getEmail_id()+"and password is"+user.getPassword();
				
				SimpleMailMessage mailMessage = new SimpleMailMessage();
				mailMessage.setTo(user.getEmail_id());
				mailMessage.setSubject("email id");
				mailMessage.setText(msg);
				
				try
				{
					mailsender.send(mailMessage);
				}
				catch(MailException error)
				{
					System.out.println("inside mail exception");
					error.printStackTrace();
				}
			}
			else
			{
				System.out.println("error sending mail");
				return 0;
			}
			return iuserdao.registerUser(user,project_id,department_id);
		}
	
	
	
		
		@PostMapping("/login")
		public User login(@RequestBody User user)
		{
			System.out.println(user);
			return iuserdao.login(user);
		}
		
		
	
		@PostMapping("/forgot")
		public Integer forgotPassword(@RequestBody User user)
		{
			user = iuserdao.findByEmail(user);
			System.out.println(user);
			try
			{		System.out.println(user);
				if(user !=null)
				{
					Otp otp=new Otp();
					otp.setOtp(iuserdao.generateOtp());
					iuserdao.saveOtp(otp);
					String msg="Your one time password for forgot password is = "+otp;
					SimpleMailMessage mailMessage = new SimpleMailMessage();
					mailMessage.setTo(user.getEmail_id());
					mailMessage.setSubject("One Time Password");
					mailMessage.setText(msg);
					try
					{
						mailsender.send(mailMessage);
					}
					catch (MailException e) 
		            {
						System.out.println("inside mail exception");
						e.printStackTrace();
					}
					return 1;
				}
			} catch (NoResultException e) 
			{
				System.out.println("in the exception");
				e.printStackTrace();
			}
			return 0;
		}
	
		
		
	
		@PutMapping("/{id}")
		public ResponseEntity<?> updateEmpDetails(@RequestBody User u)
		{
			System.out.println("in update " + " " + u);
			
			try 
			{
				return new ResponseEntity<User>(iuserdao.updateDetails(u),HttpStatus.OK);
			}
			catch (RuntimeException e1)
			{
				e1.printStackTrace();
				return new ResponseEntity<String>(e1.getMessage(), HttpStatus.INTERNAL_SERVER_ERROR);
			}
		}
		
		

		
		@PostMapping("/confirmOtp")
		public boolean confirmOtp(@RequestBody Otp otp)
		{
			Otp o=iuserdao.getOtp();
			System.out.println(otp.getOtp());
			System.out.println(o.getOtp());
			if(otp.getOtp()==o.getOtp())
			{
				iuserdao.deleteOtp();
				return true;
			}
			else
			{
				System.out.println("in false");
				return false;
			}
		}
		
		
		
		
		@PostMapping("/resetpassword")
		public boolean resetPassword(@RequestBody User user)
		{
			//System.out.println(user.getPassword());
			//System.out.println(user.getEmail());
			iuserdao.resetPassword(user);
		
			return true;
		}
		
		@GetMapping("/singleUser")
		public User getUserByemail(@RequestParam String email_id)
	    {
			System.out.println("In User Controller");
			return iuserdao.getUserByemail(email_id);
		}

		
		
}
